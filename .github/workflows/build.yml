name: C/C++ CI

on: [ push ]

jobs:
  build: 
    runs-on: ubuntu-latest
    container: 
      image: emscripten/emsdk:3.1.20
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build
        run: |
          bash Build.sh
      
      - name: Pack
        run: |
          mkdir dest
          mkdir dest/lib
          cp build/libDxLib.a dest/lib/
          cp build/libDxUseCLib.a dest/lib/
          cp build/libDxDrawFunc.a dest/lib/
          mkdir dest/include
          cp DxCompileConfig.h dest/include/
          cp DxDataType.h dest/include/
          cp DxDataTypeHTML5.h dest/include/
          cp DxFunctionHTML5.h dest/include/
          cp DxLib.h dest/include/
          zip -r DxLibForHTML5.zip dest
          tar -cvzf DxLibForHTML5.tgz dest/*

      - uses: actions/upload-artifact@v3
        with:
          name: DxLibHTML5
          path: DxLibForHTML5.*

      - name: Create release
        if: ${{ contains(github.ref, 'tags/') }}
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }} 

      - name: Upload Release Asset (zip)
        if: ${{ contains(github.ref, 'tags/') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: DxLibForHTML5.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (zip)
        if: ${{ contains(github.ref, 'tags/') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: DxLibForHTML5.tgz
          asset_content_type: application/zip
